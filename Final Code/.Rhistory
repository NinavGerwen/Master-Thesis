## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(c))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE, start.val = start.vals)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, b * 4, c, mean(prop_1)))
}
}
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE, start.val = start.vals)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
View(alpha_results_two)
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE, start.val = start.vals)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE, start.val = start.vals)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
## start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
multigroup.data.gen(100, 10, 2)
multigroup.data.gen(100, 10, 2)
multigroup.data.gen(100, 20, 2)
colnames(test)
colnames(test) <- c(1:k, "split")
colnames(test)
split_set <- subset(data, split == as.numeric(j), -split)
split_set <- subset(testdata, split == as.numeric(j), -split)
split_set <- subset(test, split == as.numeric(1), -split)
split_set <- subset(test, split == 1, -split)
split_set <- subset(test, split == 1, -split)
split_set <- subset(test, split == "1", -split)
colnames(dat)
colnames(data)
split_set <- subset(data, split == "1", -split)
split_set
?ltm
MG.LR.test <- function(l_0, data, g, start.val = NULL){
data <- data %>% as.data.frame(.)
colnames(data) <- c(1:k, "split")
split_LR_values <- rep(NA, g)
for(j in 1:g){
split_set <- subset(data, split == as.numeric(j), -split)
split_LR_values[j] <- ltm(split_set ~ z1, IRT.param = TRUE,
start.val = "random")$log.Lik
}
LR_value <- 2 * ((sum(split_LR_values, na.rm =  TRUE)) - l_0)
return(LR_value)
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
## start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
MG.LR.test <- function(l_0, data, g, start.val = NULL){
data <- data %>% as.data.frame(.)
colnames(data) <- c(1:k, "split")
split_LR_values <- rep(NA, g)
for(j in 1:g){
split_set <- subset(data, split == as.numeric(j), -split)
split_LR_values[j] <- ltm(split_set ~ z1, IRT.param = TRUE,
start.val = start.val)$log.Lik
}
LR_value <- 2 * ((sum(split_LR_values, na.rm =  TRUE)) - l_0)
return(LR_value)
}
## method options are theta or param
## n is here group size, no longer total n
multigroup.data.gen <- function(n, k, g, method = "theta"){
if(method == "theta"){
data <- matrix(data = NA, nrow = n * g, ncol = k + 1)
beta <- matrix(data = rep(c(-1, -0.5, 0, 0.5, 1), k), nrow = n, ncol = k, byrow = TRUE)
counter <- 1
if(k == 5){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3), ncol = k,
nrow = n, byrow = TRUE)
}
if(k == 10){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1,
0.85, 0.7), ncol = k, nrow = n,
byrow = TRUE)
}
if(k == 20){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1,
0.85, 0.7, 1.15, 1.3, 0.7, 0.85, 1,
1, 0.7, 1.3, 0.85, 1.15), ncol = k, nrow = n,
byrow = TRUE)
}
for(i in 1:g){
theta <- matrix(data = rep((rnorm(n) - (as.numeric(i) - 1)), k), ncol = k)
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
data[counter:(counter + n - 1) , 1:k] <- matrix(data = rbinom(n = n * k, size = 1, prob = Z),
ncol = k, nrow = n)
data[counter:(counter + n - 1), (k + 1)] <- i
counter <- counter + n
}
}
if(method == "param"){
data <- matrix(data = NA, nrow = n * g, ncol = k + 1)
counter <- 1
for(i in 1:g){
theta <- matrix(data = rep((rnorm(n)), k), ncol = k)
beta <- matrix(data = rep( (c(-1, -0.5, 0, 0.5, 1) - ((as.numeric(i) -  1)/ 2)) , k),
nrow = n, ncol = k, byrow = TRUE)
if(k == 5){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3) - ((as.numeric(i) - 1)/8)), ncol = k,
nrow = n, byrow = TRUE)
}
if(k == 10){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1, 0.85, 0.7) - ((as.numeric(i) - 1)/8)), ncol = k, nrow = n,
byrow = TRUE)
}
if(k == 20){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1, 0.85,
0.7, 1.15, 1.3, 0.7, 0.85, 1, 1, 0.7, 1.3, 0.85, 1.15) - ((as.numeric(i) - i)/8)), ncol = k, nrow = n,
byrow = TRUE)
}
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
data[counter:(counter + n - 1) , 1:k] <- matrix(data = rbinom(n = n * k, size = 1, prob = Z),
ncol = k, nrow = n)
data[counter:(counter + n - 1), (k + 1)] <- i
counter <- counter + n
}
}
return(data)
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
View(alpha_results_two)
View(split_set)
V1:V6
?subset
start.values(5)
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
?start.val.ltm
??start.val.ltm
?ltm
MG.LR.test <- function(l_0, data, g, start.val = NULL){
temp_data <- data %>% as.data.frame(.)
colnames(temp_data) <- c(1:k, "split")
split_LR_values <- rep(NA, g)
for(j in 1:g){
split_set <- subset(temp_data, split == as.numeric(j), -split)
split_LR_values[j] <- ltm(split_set ~ z1, IRT.param = TRUE)$log.Lik
}
LR_value <- 2 * ((sum(split_LR_values, na.rm =  TRUE)) - l_0)
return(LR_value)
}
## method options are theta or param
## n is here group size, no longer total n
multigroup.data.gen <- function(n, k, g, method = "theta"){
if(method == "theta"){
data <- matrix(data = NA, nrow = n * g, ncol = k + 1)
beta <- matrix(data = rep(c(-1, -0.5, 0, 0.5, 1), k), nrow = n, ncol = k, byrow = TRUE)
counter <- 1
if(k == 5){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3), ncol = k,
nrow = n, byrow = TRUE)
}
if(k == 10){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1,
0.85, 0.7), ncol = k, nrow = n,
byrow = TRUE)
}
if(k == 20){
alpha <- matrix(data = c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1,
0.85, 0.7, 1.15, 1.3, 0.7, 0.85, 1,
1, 0.7, 1.3, 0.85, 1.15), ncol = k, nrow = n,
byrow = TRUE)
}
for(i in 1:g){
theta <- matrix(data = rep((rnorm(n) - (as.numeric(i) - 1)), k), ncol = k)
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
data[counter:(counter + n - 1) , 1:k] <- matrix(data = rbinom(n = n * k, size = 1, prob = Z),
ncol = k, nrow = n)
data[counter:(counter + n - 1), (k + 1)] <- i
counter <- counter + n
}
}
if(method == "param"){
data <- matrix(data = NA, nrow = n * g, ncol = k + 1)
counter <- 1
for(i in 1:g){
theta <- matrix(data = rep((rnorm(n)), k), ncol = k)
beta <- matrix(data = rep( (c(-1, -0.5, 0, 0.5, 1) - ((as.numeric(i) -  1)/ 2)) , k),
nrow = n, ncol = k, byrow = TRUE)
if(k == 5){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3) - ((as.numeric(i) - 1)/8)), ncol = k,
nrow = n, byrow = TRUE)
}
if(k == 10){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1, 0.85, 0.7) - ((as.numeric(i) - 1)/8)), ncol = k, nrow = n,
byrow = TRUE)
}
if(k == 20){
alpha <- matrix(data = (c(0.7, 0.85, 1, 1.15, 1.3, 1.3, 1.15, 1, 0.85,
0.7, 1.15, 1.3, 0.7, 0.85, 1, 1, 0.7, 1.3, 0.85, 1.15) - ((as.numeric(i) - i)/8)), ncol = k, nrow = n,
byrow = TRUE)
}
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
data[counter:(counter + n - 1) , 1:k] <- matrix(data = rbinom(n = n * k, size = 1, prob = Z),
ncol = k, nrow = n)
data[counter:(counter + n - 1), (k + 1)] <- i
counter <- counter + n
}
}
return(data)
}
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 10
alpha_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g, method = "param")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
alpha_results_two <- rbind(alpha_results_two, c(a, as.numeric(as.character(b)) * 4, d, mean(prop_1)))
}
}
}
