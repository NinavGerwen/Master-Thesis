library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300)/4)
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
power_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "param", model = "3PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
power_results_two <- rbind(power_results_two, c(a, b, d, mean(prop_1)))
}
}
}
power_results_two <- power_results_two %>%
pivot_wider(., names_from = G, values_from = MG.LR) %>%
.[-1, -3]
rownames(power_results_two) <- NULL
colnames(power_results_two) <- c("test_length", "sample_size", "LR2", "LR3", "LR4")
power_results_two
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
theta_power <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "3PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_power <- rbind(theta_power, c(a, b, d, mean(prop_1)))
}
}
}
theta_power <- theta_power %>%
pivot_wider(., names_from = G, values_from = MG.LR) %>%
.[-1, -3]
rownames(theta_power) <- NULL
colnames(theta_power) <- c("test_length", "sample_size", "LR2", "LR3", "LR4")
theta_power
View(alpha_results_two)
View(power_results_two)
View(theta_alpha)
View(theta_power)
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
power_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_n <- as.numeric(as.character(b))
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "param", model = "3PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
power_results_two <- rbind(power_results_two, c(a, b, d, mean(prop_1)))
}
}
}
View(multigroup.data.gen)
source("Functions/model-calculations.R")
source("Functions/start.values.R")
source("Functions/multigroup-data-gen.R")
source("Functions/multigroup-lr-test-calculation.R")
source("Functions/model-calculations.R")
source("Functions/start.values.R")
source("Functions/multigroup-data-gen.R")
source("Functions/multigroup-lr-test-calculation.R")
li brary(ltm)
library(ltm)
library(dplyr)
library(mirt)
library(tidyr)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
theta_alpha <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "2PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_alpha <- rbind(theta_alpha, c(a, b, d, mean(prop_1)))
}
}
}
View(theta_alpha)
View(theta_alpha)
library(ltm)
library(dplyr)
library(mirt)
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
power_results_two <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "param", model = "3PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
power_results_two <- rbind(power_results_two, c(a, b, d, mean(prop_1)))
}
}
}
power_results_two <- power_results_two %>%
pivot_wider(., names_from = G, values_from = MG.LR) %>%
.[-1, -3]
rownames(power_results_two) <- NULL
colnames(power_results_two) <- c("test_length", "sample_size", "LR2", "LR3", "LR4")
power_results_two
View(power_results_two)
library(ltm)
library(dplyr)
library(mirt)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
theta_power <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "3PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_power <- rbind(theta_power, c(a, b, d, mean(prop_1)))
}
}
}
theta_power <- theta_power %>%
pivot_wider(., names_from = G, values_from = MG.LR) %>%
.[-1, -3]
rownames(theta_power) <- NULL
colnames(theta_power) <- c("test_length", "sample_size", "LR2", "LR3", "LR4")
theta_power
View(theta_power)
source("Functions/model-calculations.R")
source("Functions/start.values.R")
source("Functions/multigroup-data-gen.R")
source("Functions/multigroup-lr-test-calculation.R")
library(ltm)
library(dplyr)
library(mirt)
library(tidyr)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
theta_alpha <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "2PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_alpha <- rbind(theta_alpha, c(a, b, d, mean(prop_1)))
}
}
}
theta_alpha <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(3)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "2PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_alpha <- rbind(theta_alpha, c(a, b, d, mean(prop_1)))
}
}
}
?ltm
?solve
theta_alpha <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(901)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "2PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_alpha <- rbind(theta_alpha, c(a, b, d, mean(prop_1)))
}
}
}
source("Functions/model-calculations.R")
source("Functions/start.values.R")
source("Functions/multigroup-data-gen.R")
source("Functions/multigroup-lr-test-calculation.R")
source("Functions/model-calculations.R")
source("Functions/start.values.R")
source("Functions/multigroup-data-gen.R")
source("Functions/multigroup-lr-test-calculation.R")
theta_alpha <- data.frame(test_length = NA, sample_size = NA, G = NA, MG.LR = NA)
set.seed(1248)
## This is for empirical alpha estimation
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 300, 500, 1000, 1500))
n_groups <- as.factor(c(2, 3, 4))
n_sim <- 300
set.seed(1248)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(d in levels(n_groups)){
prop_1 <- rep(NA, n_sim)
temp_k <- as.numeric(as.character(a))
temp_g <- as.numeric(as.character(d))
temp_n <- round(as.numeric(as.character(b))/temp_g)
start.vals <- start.values(temp_k)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- multigroup.data.gen(n = temp_n, k = temp_k, g = temp_g,
method = "theta", model = "2PL")
temp_model <- ltm(temp_data[ , 1:temp_k] ~ z1, IRT.param = TRUE)
l_0 <- temp_model$log.Lik
p_value_1 <- 1 - pchisq(q = MG.LR.test(l_0 = l_0, data = temp_data, g = temp_g,
k = temp_k, start.val = start.vals),
df = (temp_g - 1) * 2 * temp_k)
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
}
theta_alpha <- rbind(theta_alpha, c(a, b, d, mean(prop_1)))
}
}
}
theta_alpha <- theta_alpha %>%
pivot_wider(., names_from = G, values_from = MG.LR) %>%
.[-1, -3]
rownames(theta_alpha) <- NULL
colnames(theta_alpha) <- c("test_length", "sample_size", "LR2", "LR3", "LR4")
theta_alpha
View(theta_alpha)
data.frame(NULL)
data.frame(x = NULL)
data.frame(x = 1)
data.frame(x = NA)
data.frame(x = NULL)
data.frame(x = NULL, y = NULL)
df <- data.frame(1:3)
t(df)
t(t(df))
class(t(t(df)))
df <- data.frame(a = letters[1:3])
df
t(df)
class(t(df))
t(t(df))
df <- data.frame(x = letters[1:3], y = 1:3, z = c(TRUE, TRUE, FALSE))
df
as.matrix(df\)
as.matrix(df)
?data.matrix
data.matrix(df)
1:10^2
1:10 * t(1:10)
## Data generation is based on three models, therefore we created functions for
## the calculations of every model (1PL - 2PL - 3PL)
source("Functions/model-calculations.R")
source("Functions/data-generation.R")
source("Functions/missingness.R")
source("Functions/fit-indices calculations.R")
source("Functions/data-aggregation.R")
## LTM to fit the required models
require(ltm)
## DPLYR for some tidying
require(dplyr)
## MAGRITTR for the pipe
require(magrittr)
test <- data.gen(100, 5, "2PL")
test <- data.gen(300, 5, "2PL")
testmodel <- ltm(test ~ z1, IRT.param = TRUE)
scores <- factor.scores(testmodel)$score.dat
obs <- scores$Obs
exp <- scores$Exp
obs^2
obs * t(obs)
obs * exp
obs * t(exp)
obs %*% exp
obs %*% t(exp)
obs^2
obs %*% t(obs)
t(obs) %*% obs
t(obs) %*% exp
t(obs) %*% exp * 2 / (t(obs) %*% obs + t(exp) %*% exp)
t(obs) %*% exp * 2 / (t(obs) %*% obs + t(exp) %*% exp)
sum(obs^2)
t(obs) %*% obs
sum( obs * t(exp))
obs * t(exp)
obs * t(exp) %>% sum(.)
obs %*% t(exp)
t(obs) %*% exp
obs * t(exp)
obs * t(exp) %>% sum(.)
sum(obs * exp)
t(obs) %*% exp
t(obs) %*% obs
obs^2
sum(obs^2)
sum(scores$Obs)
system.time( exp.obs.FI(testmodel, 5))
system.time( exp.obs.FI(testmodel, 5))
factor.scores(testmodel)$score.dat
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2))]
k <- 5
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2))]
obs_exp <- factor.scores(model)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE]
obs_exp <- factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE]
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[obs])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.["Obs"])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[Obs])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[[Obs]])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[, Obs])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[, .Obs])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[, .$Obs])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(.[, 1])
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %>% t(x = .[, 1])
library(magrittr)
library(magrittr)
factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %$% Obs
Exp <- factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %<>% Obs
Exp <- factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE] %<>% .[Obs]
obs_exp <- factor.scores(testmodel)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE]
efficient <- function(model, k){
obs_exp <- factor.scores(model)$score.dat %>% .[, c((k+1), (k+2)), drop = FALSE]
return(2 * t(obs_exp$Obs) %*% obs_exp$Exp / (t(obs_exp$Obs %*% obs_exp$Obs) + t(obs_exp$Exp) %*% obs_exp$Exp))
}
efficient(testmodel, 5)
exp.obs.FI(testmodel, 5)
exp.obs.FI(testmodel, 5)
efficient(testmodel, 5)
system.time(efficient(testmodel, 5))
system.time(exp.obs.FI(testmodel, 5))
exp.obs.FI <- function(model, k){
obs_exp <- factor.scores(model)$score.dat
obs <- obs_exp[, (k + 1)]
exp <- obs_exp[, (k + 2)]
numerator <- 2 * t(obs) %*% exp
denominator <- (t(obs) %*% obs) + (t(exp) %*% exp)
value <- numerator / denominator
return(value)
}
exp.obs.FI(testmodel, 5)
install.packages("bench")
library(bench)
bench::bench_memory(efficient(testmodel, 5))
bench::bench_memory(exp.obs.FI(testmodel, 5))
