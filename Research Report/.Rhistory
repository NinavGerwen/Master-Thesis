for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
results <- results[-1 ,]
rownames(results) <- NULL
View(results)
test_dat <- data.gen(50, 5, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 5, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
LR.test(data = test_dat, model = "2PL", g = 2)
LR.test(data = test_dat, model = "1PL", g = 2)
LR.test(data = test_dat, model = "3PL", g = 2)
LR.test(data = test_dat, model = "3PL", g = 4)
View(test_dat)
test_dat <- data.gen(2000, 10, "1PL")
LR.test(data = test_dat, model = "3PL", g = 4)
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 20, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 20, "3PL")
LR.test(data = test_dat, model = "3PL", g = 2)
?tpm
control <- list(optimizer = "nlminb", iter.qN = 2000, GHk = 30)
test_dat <- data.gen(2000, 20, "3PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
View(test_dat)
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random", control = control)
mml3
control <- list(optimizer = "optim", iter.qN = 2000, GHk = 30)
mml3 <- tpm(test_dat, start.val = "random", control = control)
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 500, 1000, 1500, 2000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
## Data generation is based on three models, therefore we created functions for
## the calculations of every model (1PL - 2PL - 3PL)
one.pl <- function(theta, beta){
prob <- exp(theta - beta) / (1 + exp(theta - beta))
return(prob)
}
two.pl <- function(theta, alpha, beta){
prob <- exp((alpha * theta) + beta) / (1 + exp((alpha * theta) + beta))
return(prob)
}
three.pl <- function(theta, alpha, beta, gamma){
prob <- gamma + (1 - gamma) * (exp((alpha * theta) + beta) / (1 + exp((alpha + theta) + beta)))
return(prob)
}
data.gen <- function(n, k, model = "1PL"){
theta <- matrix(data = rep(rnorm(n), k), ncol = k)
beta <- matrix(data = rep(c(-2, -1, 0, 1, 2), k), nrow = n, ncol = k, byrow = TRUE)
if(model == "1PL"){
Z <- one.pl(theta = theta, beta = beta)
}
if(model == "2PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
}
if(model == "3PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
gamma <- matrix(data = rep(c(0.05, 0.08, 0.11, 0.14, 0.17), k), ncol = k,
nrow = n, byrow = TRUE)
Z <- three.pl(theta = theta, alpha = alpha, beta = beta, gamma = gamma)
}
data <- matrix(data = rbinom(n = n * k, size = 1, prob = Z), ncol = k, nrow = n)
return(data)
}
gamma <- matrix(data = rep(c(0.05, 0.08, 0.11, 0.14, 0.17), k), ncol = k,
nrow = n, byrow = TRUE)
LR.test <- function(data, model = "1PL", g = 2){
temp_data <- as.data.frame(data)
temp_data$split <- sample(1:g, nrow(data), replace = TRUE)
if(model == "1PL"){
whole_log <- rasch(data = data)$log.Lik
}
if(model == "2PL"){
whole_log <- ltm(data ~ z1)$log.Lik
}
if(model == "3PL"){
## safeguard voor convergeren
whole_log <- tpm(data, start.val = "random")$log.Lik
}
split_LR_values <- rep(NA, g)
for(j in 1:g) {
if(model == "1PL"){
split_LR_values[j] <- rasch(subset(temp_data, split == j, select = -split))$log.Lik
}
if(model == "2PL"){
split_LR_values[j] <- ltm(subset(temp_data, split == j, select = -split) ~ z1, IRT.param = TRUE)$log.Lik
}
if(model == "3PL"){
split_LR_values[j] <- tpm(subset(temp_data, split == j, select = -split),
start.val = "random")$log.Lik
}
}
LR_value <- whole_log / prod(split_LR_values, na.rm = TRUE)
return(LR_value)
}
degree.function <- function(model = "1PL", k, g = NULL){
if(is.null(g)){
if(model == "1PL"){
df <- k
}
if(model == "2PL"){
df <- 2 * k
}
if(model == "3PL"){
df <- 3 * k
}
} else {
if(model == "1PL"){
df <- g * k
}
if(model == "2PL"){
df <- 2 * g * k
}
if(model == "3PL"){
df <- 3 * g * k
}
}
return(df)
}
deltadf <- function(model.1, model.2) {
d_df <- degree.function(model.1) - degree.function(model.2)
return(d_df)
}
base.model <- function(data) {
k <- ncol(data)
n <- nrow(data)
pi <- rep(NA, k)
for(i in 1:k) {
n_i <- sum(data[, i] == 1)
pi_i <- mean(data[, i])
pi[i] <- (pi_i)^n_i * (1 - (pi_i))^(n - n_i)
}
loglik <- log(prod(pi))
return(loglik)
}
sat.model <- function(agg_data) {
n <- nrow(agg_data)
pi <- rep(NA, n)
for(i in 1:n) {
n_x <- agg_data$frequency
pi[i] <- n_x / n
}
loglik <- log(prod(pi))
return(loglik)
}
library(ltm)
true_model <- as.factor(c("1PL", "2PL", "3PL"))
```{r Final run}
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 500, 1000, 1500, 2000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
View(results)
n_sim <- 1
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = -2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
View(results)
mml3 <- tpm(test_dat, start.val = "random")
library(ltm)
test_dat <- data.gen(50, 15, "3PL")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
test_dat <- data.gen(25, 15, "3PL")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
test_dat <- data.gen(25, 15, "1PL")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random")
LR.test <- function(data, model = "1PL", g = 2){
temp_data <- as.data.frame(data)
temp_data$split <- sample(1:g, nrow(data), replace = TRUE)
if(model == "1PL"){
whole_log <- rasch(data = data)$log.Lik
}
if(model == "2PL"){
whole_log <- ltm(data ~ z1)$log.Lik
}
if(model == "3PL"){
## safeguard voor convergeren
whole_log <- tpm(data, start.val = "random")$log.Lik
}
split_LR_values <- rep(NA, g)
for(j in 1:g) {
if(model == "1PL"){
split_LR_values[j] <- rasch(subset(temp_data, split == j, select = -split))$log.Lik
}
if(model == "2PL"){
split_LR_values[j] <- ltm(subset(temp_data, split == j, select = -split) ~ z1, IRT.param = TRUE)$log.Lik
}
if(model == "3PL"){
split_LR_values[j] <- tpm(subset(temp_data, split == j, select = -split),
start.val = "random")$log.Lik
}
}
LR_value <- whole_log / prod(split_LR_values, na.rm = TRUE)
return(LR_value)
}
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
LR.test(test_dat, model = "3PL", g = 4)
View(results)
cbind(3, 1, 0)
control <- list(iter.qN = 2000, GHk = 30)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
test_dat <- data.gen(25, 15, "1PL")
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
control <- list(iter.qN = 2000, GHk = 30)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
control <- list(iter.qN = 5000, GHk = 30)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
control <- list(iter.qN = 5000, GHk = 40)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
constraint = )
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
control <- list(iter.qN = 5000, GHk = 40)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
control <- list(iter.qN = 5000, GHk = 50)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
?tryCatch
warning <- FALSE
tryCatch(mml3)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
x = try(tpm(test_dat, start.val = "random", max.guessing = .3,
control = control))
if(class(x) == "Warning")
class(x)
?tryu
?try
x = tryCatch(tpm(test_dat, start.val = "random", max.guessing = .3,
control = control))
x$call
x$convergence
x$convergence
test_dat <- data.gen(100, 15, "1PL")
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
test_dat <- data.gen(100, 15, "1PL")
test_dat <- data.gen(1000, 15, "1PL")
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3$convergence
mml3$convergence
?optim
mml3
test_dat <- data.gen(100, 15, "1PL")
mml3 <- tpm(test_dat, start.val = "random", max.guessing = .3,
control = control)
mml3$convergence
mml3$convergence
mml3
x = tryCatch(tpm(test_dat, start.val = "random", max.guessing = .3,
control = control))
x <- tryCatch(tpm(test_dat, start.val = "random", max.guessing = .3,
control = control))
r <- cbind(1:15, 1:15, rep(0.25, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
r <- cbind(1:15, rep(1, 15), rep(0.25, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4
r <- cbind(1:15, rep(1, 15), rep(x, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
r <- cbind(1:15, rep(1, 15), rep(NA, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4
r <- cbind(1:15, rep(1, 15), rep(NA, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
r <- cbind(1:15, rep(1, 15), rep(.25, 15))
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4
test_dat <- data.gen(100, 15, "1PL")
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
mml4 <- tpm(test_dat, start.val = "random",
constraint = r, control = control)
