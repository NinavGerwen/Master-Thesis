?function
quit
?function
()
dsf
n <- 100
matrix(data = rep(rnorm(n), k), ncol = k)
k <- 5
matrix(data = rep(rnorm(n), k), ncol = k)
matrix(data = rep(rnorm(n), k), ncol = k, byrow = TRUE)
gamma <- 0.25
theta <- rnorm(n)
theta_k <- matrix(data = rep(theta, k), ncol = k)
beta <- matrix(data = rep(c(-2, -1, 0, 1, 2), k), ncol = k, nrow = n,
byrow = TRUE)
alpha <- matrix(data = 0.7, ncol = k, nrow = n)
gamma <- 0.25
prob <- gamma + (1 - gamma) * (exp((alpha * theta) + beta) / (1 + exp((alpha + theta) + beta)))
View(prob)
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
View(alpha)
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = 15, byrow = TRUE)
View(alpha)
k <- 15
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
View(alpha)
one.pl <- function(theta, beta){
prob <- exp(theta - beta) / (1 + exp(theta - beta))
return(prob)
}
## Question Dave: is er een probleem met ene functie - beta en andere + beta
two.pl <- function(theta, alpha, beta){
prob <- exp((alpha * theta) + beta) / (1 + exp((alpha * theta) + beta))
return(prob)
}
three.pl <- function(theta, alpha, beta, gamma){
prob <- gamma + (1 - gamma) * (exp((alpha * theta) + beta) / (1 + exp((alpha + theta) + beta)))
return(prob)
}
data.gen <- function(n, k, model){
theta <- matrix(data = rep(rnorm(n), k), ncol = k)
beta <- matrix(data = rep(c(-2, -1, 0, 1, 2), k), nrow = n, ncol = k, byrow = TRUE)
if(model == "1PL"){
Z <- one.pl(theta = theta, beta = beta)
}
if(model == "2PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
}
if(model == "3PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
gamma <- 0.15 + rnorm(1, 0, 0.05)
Z <- three.pl(theta = theta, alpha = alpha, beta = beta, gamma = gamma)
}
data <- matrix(data = rbinom(n = n * k, size = 1, prob = Z), ncol = k, nrow = n)
return(data)
}
data.gen(100, 5, "1PL")
data.gen(100, 5, "1PL")
data.gen(100, 5, "1PL")
space <- list(rep(NA, 100))
View(space)
View(space)
space <- list(NA)
View(space)
list[i]
list[1]
space[1]
for(i in 1:100){
list[i] <- data.gen(100, 5, "1PL")
}
space[i] <- data.gen(100, 5, "1PL")
for(i in 1:100){
space[i] <- data.gen(100, 5, "1PL")
}
space <- list()
for(i in 1:100){
space[i] <- data.gen(100, 5, "1PL")
}
for(i in seq_along(100)){
space[i] <- data.gen(100, 5, "1PL")
}
View(space)
for(i in seq_along(matrix(data = NA, nrow = 100, ncol = 5))){
space[i] <- data.gen(100, 5, "1PL")
}
View(space)
space[[i]] <- data.gen(100, 5, "1PL")
for(i in seq_along(matrix(data = NA, nrow = 100, ncol = 5))){
space[[i]] <- data.gen(100, 5, "1PL")
}
View(space)
space[[1]]
space[1]
space[2]
space[[3]]
?ltm
??ltm
rasch(data.gen(100, 5, "1PL"))
library(ltm)
rasch(data.gen(100, 5, "1PL"))
ltm(data.gen(100, 5, "1PL"))
mml1 <- rasch(data.gen(100, 5, "1PL"))
mml2 <- ltm(data.gen(100, 5, "1PL") ~ z1, IRT.param = TRUE)
mml3 <- tpm(data.gen(100, 5, "1PL"))
anova(mml1, mml2)
anova(mml2, mml3)
test_dat <- data.gen(100, 5, "1PL")
test_dat <- data.gen(100, 5, "1PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
anova(mml1, mml2)
anova(mml2, mml3)
space <- list()
for(i in 1:100){
temp_data <- data.gen(100, 5, "1PL")
}
one.pl <- function(theta, beta){
prob <- exp(theta - beta) / (1 + exp(theta - beta))
return(prob)
}
## Question Dave: is er een probleem met ene functie - beta en andere + beta
two.pl <- function(theta, alpha, beta){
prob <- exp((alpha * theta) + beta) / (1 + exp((alpha * theta) + beta))
return(prob)
}
three.pl <- function(theta, alpha, beta, gamma){
prob <- gamma + (1 - gamma) * (exp((alpha * theta) + beta) / (1 + exp((alpha + theta) + beta)))
return(prob)
}
data.gen <- function(n, k, model){
theta <- matrix(data = rep(rnorm(n), k), ncol = k)
beta <- matrix(data = rep(c(-2, -1, 0, 1, 2), k), nrow = n, ncol = k, byrow = TRUE)
if(model == "1PL"){
Z <- one.pl(theta = theta, beta = beta)
}
if(model == "2PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
Z <- two.pl(theta = theta, alpha = alpha, beta = beta)
}
if(model == "3PL"){
alpha <- matrix(data = rep(c(0.7, 0.85, 1, 1.15, 1.3), k), ncol = k,
nrow = n, byrow = TRUE)
gamma <- 0.15 + rnorm(1, 0, 0.05)
Z <- three.pl(theta = theta, alpha = alpha, beta = beta, gamma = gamma)
}
data <- matrix(data = rbinom(n = n * k, size = 1, prob = Z), ncol = k, nrow = n)
return(data)
}
space <- list()
for(i in 1:100){
temp_data <- data.gen(100, 5, "1PL")
}
library(ltm)
test_dat <- data.gen(100, 5, "1PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
anova(mml1, mml2)
anova(mml2, mml3)
mml1
mml1$log.Lik
mml2$log.Lik
mml3$log.Lik
?sample
?FUN
?apply
View(mml1)
rasch(test_dat)$log.Lik
View(mml2)
View(mml3)
sample(test_dat, 50)
sample(test_dat, 100)
View(test_dat)
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sum(sample(test_dat, 100))
sample(0:1, 100)
sample(nrow(test_dat))
sample(nrow(test_dat), 1/nrow(test_dat))
sample(nrow(test_dat), nrow(test_dat)/2)
?%in%
test_dat[sample(nrow(testdat), nrow(data)/2) ,]
test_dat[sample(nrow(test_dat), nrow(test_dat)/2) ,]
temp_data <- cbind(data, sample(c(1, 2), nrow(data), replace = TRUE))
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
temp_data <- cbind(data, sample(c(1, 2), nrow(data), replace = TRUE))
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
View(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data$V6)
table(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data)
temp_data <- cbind(test_dat, sample(c(1, 2), nrow(test_dat), replace = TRUE))
table(temp_data)
temp_data[split == 1]
temp_data[split == 2]
temp_data[split == "2"]
temp_data[, split == "2"]
subset(temp_data, split == 1)
temp_data <- cbind(test_dat, split = sample(c("one", "two"), nrow(test_dat), replace = TRUE))
View(temp_data)
str(temp_data)
rasch(temp_data[, 1:5])
temp_data <- cbind(as.numeric(test_dat), split = sample(c("one", "two"), nrow(test_dat), replace = TRUE))
View(temp_data)
temp_data <- cbind(as.matrix(test_dat), split = sample(c("one", "two"), nrow(test_dat), replace = TRUE))
View(temp_data)
temp_data <- test_dat
temp_data$split <- sample(c("one", "two"), nrow(data), replace = TRUE)
temp_data <- data
temp_data$split <- sample(c("one", "two"), nrow(test_dat), replace = TRUE)
temp_data <- test_dat
temp_data$split <- sample(c("one", "two"), nrow(temp_data), replace = TRUE)
View(temp_data)
temp_data <- as.data.frame(test_dat)
temp_data$split <- sample(c("one", "two"), nrow(temp_data), replace = TRUE)
View(temp_data)
subset(temp_data, split == "one")
temp_data[split == "one"]
temp_data[, split == "one"]
temp_data[split == "one" ,]
subset(temp_data, split == "one" & -split)
subset(temp_data, split == "one" & !split)
rasch(temp_data)
rasch(test_dat)
View(temp_data)
subset(temp_data[, 1:5], split == "one" & !split)
subset(temp_data[, 1:5], split == "one")
temp_data[which(split == "one")]
temp_data[which(temp_data$split == "one")]
temp_data[which(temp_data$split == "one") ,]
temp_data[which(temp_data$split == "one") , 1:5]
temp_data[which(temp_data$split == "one") , !split]
temp_data[which(temp_data$split == "one") , -temp_data$split]
temp_data[which(temp_data$split == "one") , !temp_data$split]
?subset
subset(temp_data, split == "one", drop = TRUE)
subset(temp_data, split == "one", select = -split)
if(model == "1PL"){
whole_log <- rasch(data = data)$log.Lik
one_half_log <-
two_half_log <-
}
LR.test <- function(data, model = "1PL"){
temp_data <- as.data.frame(data)
temp_data$split <- sample(c("one", "two"), nrow(data), replace = TRUE)
first_half <- subset(temp_data, split == "one", select = -split)
second_half <- subset(temp_data, split == "two", select = -split)
if(model == "1PL"){
whole_log <- rasch(data = data)$log.Lik
one_half_log <- rasch(data = first_half)$log.Lik
two_half_log <- rasch(data = second_half)$log.Lik
}
if(model == "2PL"){
whole_log <- ltm(data ~ z1, IRT.param = TRUE)$log.Lik
one_half_log <- ltm(first_half ~ z1, IRT.param = TRUE)$log.Lik
two_half_log <- ltm(second_half ~ z1, IRT.param = TRUE)$log.Lik
}
if(model == "3PL"){
whole_log <- tpm(data)$log.Lik
one_half_log <- tpm(first_half)$log.Lik
two_half_log <- tpm(second_half)$log.Lik
}
LR_value <- whole_log / (one_half_log * two_half_log)
return(LR_value)
}
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat)
-2 * LR.test(test_dat)
View(mml1)
pchisq(-2 * LR.test(test_dat), df = 10)
pchisq(-2 * LR.test(test_dat), df = 10)
pchisq(-2 * LR.test(test_dat), df = 10)
g <- 4
1:g
vector <- c(10, 20, NA, NA)
10 / vector
10 / prod(vector)
10 / prod(vector, na.rm = TRUE)
?as.integer
class(i)
class(g)
?ltm
LR.test <- function(data, model = "1PL", g = 2){
temp_data <- as.data.frame(data)
temp_data$split <- sample(1:g, nrow(data), replace = TRUE)
if(model == "1PL"){
whole_log <- rasch(data = data)$log.Lik
}
if(model == "2PL"){
whole_log <- ltm(data ~ z1, IRT.param = TRUE)$log.Lik
}
if(model == "3PL"){
whole_log <- tpm(data)$log.Lik
}
split_LR_values <- rep(NA, g)
for(j in 1:g) {
if(model == "1PL"){
split_LR_values[j] <- rasch(data = subset(temp_data, split == j, select = -split))$log.Lik
}
if(model == "2PL"){
split_LR_values[j] <- ltm(subset(temp_data, split == j, select = -split) ~ z1, IRT.param = TRUE)$log.Lik
}
if(model == "3PL"){
split_LR_values[j] <- tpm(subset(temp_data, split == j, select = -split))$log.Lik
}
}
LR_value <- whole_log / prod(split_LR_values, na.rm = TRUE)
return(LR_value)
}
LR.test(test_dat)
LR.test(test_dat)
LR.test(test_dat, model = "2PL")
LR.test(test_dat, model = "2PL")
LR.test(test_dat, model = "2PL")
LR.test(test_dat, model = "3PL")
LR.test(test_dat, model = "3PL")
LR.test(test_dat, model = "3PL")
test_dat_two <- data.gen(500, 5, "1PL")
LR.test(test_dat_two, model = "3PL")
View(mml3)
mml3 <- tpm(test_dat)
mml3 <- tpm(test_dat)
test_dat_two <- data.gen(500, 5, "3PL")
tpm(test_dat_two)
?tpm
tpm(test_dat_two, type = "latent.trait")
tpm(test_dat_two, type = "latent.trait", IRT.param = FALSE)
LR.test(test_dat_two)
LR.test(test_dat_two, model = "3PL", g = 4)
LR.test(test_dat_two, model = "3PL", g = 2)
LR.test(test_dat, model = "2PL", g = 4)
LR.test(test_dat, model = "2PL", g = 3)
LR.test(test_dat, model = "2PL", g = 2)
LR.test(test_dat, model = "1PL", g = 2)
LR.test(test_dat, model = "1PL", g = 3)
LR.test(test_dat, model = "1PL", g = 4)
