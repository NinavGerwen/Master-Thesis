as.numeric(levels(test_length))[3]
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(levels(sample_size))[b],
k = as.numeric(levels(test_length))[a],
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 *LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- ...
p_value_5 <- ...
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 *LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- ...
p_value_5 <- ...
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 *LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
data.gen(n = as.numeric(as.character(test_length[1])))
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
View(temp_data)
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 *LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(20, 50, 100, 200, 500))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
View(results)
library(ltm)
test_dat <- data.gen(20, 5, "1PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
library(ltm)
test_dat <- data.gen(50, 5, "1PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(50, 100, 200, 500, 1000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(100, 200, 500, 1000, 1100, 1200))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(100, 200, 500, 1000, 1100, 1200))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
View(results)
results <- results[-1 ,]
rownames(results) <- NULL
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 500, 1000, 1500, 2000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = as.character(c), g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
View(results)
as.character(c)
c
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 500, 1000, 1500, 2000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
results <- results[-1 ,]
rownames(results) <- NULL
View(results)
test_dat <- data.gen(50, 5, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 5, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
LR.test(data = test_dat, model = "2PL", g = 2)
LR.test(data = test_dat, model = "1PL", g = 2)
LR.test(data = test_dat, model = "3PL", g = 2)
LR.test(data = test_dat, model = "3PL", g = 4)
View(test_dat)
test_dat <- data.gen(2000, 10, "1PL")
LR.test(data = test_dat, model = "3PL", g = 4)
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 20, "1PL")
LR.test(data = test_dat, model = "3PL", g = 2)
test_dat <- data.gen(2000, 20, "3PL")
LR.test(data = test_dat, model = "3PL", g = 2)
?tpm
control <- list(optimizer = "nlminb", iter.qN = 2000, GHk = 30)
test_dat <- data.gen(2000, 20, "3PL")
mml1 <- rasch(test_dat)
mml2 <- ltm(test_dat ~ z1, IRT.param = TRUE)
mml3 <- tpm(test_dat)
View(test_dat)
mml3 <- tpm(test_dat, start.val = "random")
mml3 <- tpm(test_dat, start.val = "random", control = control)
mml3
control <- list(optimizer = "optim", iter.qN = 2000, GHk = 30)
mml3 <- tpm(test_dat, start.val = "random", control = control)
test_length <- as.factor(c(5, 10, 20))
sample_size <- as.factor(c(200, 500, 1000, 1500, 2000))
true_model <- as.factor(c("1PL", "2PL", "3PL"))
n_sim <- 5
## We vary three factors, and for the simulation study, we
## cross-examine them through a nested for loop
## TUPLES
results <- data.frame(test_length = NA, sample_size = NA,
true_model = NA, LR2 = NA,
LR3 = NA, LR4 = NA, Chisq = NA, P_Chisq = NA)
for(a in levels(test_length)){
for(b in levels(sample_size)){
for(c in levels(true_model)){
prop_1 <- rep(NA, n_sim)
prop_2 <- rep(NA, n_sim)
prop_3 <- rep(NA, n_sim)
prop_4 <- rep(NA, n_sim)
prop_5 <- rep(NA, n_sim)
for(i in 1:n_sim){
## Then, for every condition, generate data according to the
## current condition
temp_data <- data.gen(n = as.numeric(as.character(b)),
k = as.numeric(as.character(a)),
model = as.character(c))
p_value_1 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 2),
df = 1)
p_value_2 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 3),
df = 1)
p_value_3 <- 1 - pchisq(q = 2 * LR.test(data = temp_data,
model = "3PL", g = 4),
df = 1)
p_value_4 <- 1
p_value_5 <- 1
prop_1[i] <- ifelse(p_value_1 < .05, 1, 0)
prop_2[i] <- ifelse(p_value_2 < .05, 1, 0)
prop_3[i] <- ifelse(p_value_3 < .05, 1, 0)
prop_4[i] <- ifelse(p_value_4 < .05, 1, 0)
prop_5[i] <- ifelse(p_value_5 < .05, 1, 0)
}
results <- rbind(results, c(a, b, c, mean(prop_1), mean(prop_2),
mean(prop_3), mean(prop_4), mean(prop_5)))
}
}
}
